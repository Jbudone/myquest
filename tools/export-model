#!/bin/bash

# Export Models
#
# Interfaces to the blender python export script, and imagemagick spritesheet baking script
#
# 
# TODO
#  - Args
#  - Blender shiz
#      blender Basilisk.josh.blend --verbose 0 --background --python ../../tools/blender.batchrender.py --json sprite.json
#  - Bakesheet shiz
#      ../../tools/bakespritesheet --frame-ratio 2 --size 256 --no-trim --folder shots.3 --output testjosh.png --speed superslow
#  - Store cache/hash in sprite.export.json for blender file (to auto re-render if changed), render folder (to auto re-trim), sprite file to auto-redo everything)
#  - Easy post-process preview; anim-preview; bounds-preview
#  - Cleanup
#  - Abstract pipeline/cache so that we can run entire preprocessor over all sprite.json's (even 2D ones where we just manipulate spritesheets) and update cache; Add all sprites.json files to git; Add sprite.json for all sprites
#  - Adding to avatars.png
#       - Need a separate script for avatars.png redraw  (so we can trigger it here AND in tools/sheetedit)
#  - Consider allowing differing width/height between anims (we have the tech for that, is it beneficial to render that way? more detail in certain shots?) -- would still have to scale to the rendered size though


VERBOSE=false
RENDER=false
RENDER_DIR=""
BLENDER_FILE=""
SPRITE_SHEET=""
ROOT_FOLDER="/home/jbud/jdrive/jstuff/work/personal/jbud/summit/playground/myquest"

BAKE=false
UPDATE_SPRITESHEETS_RESOURCE=true

QUICK_RENDER=false
RENDER_BOUNDS_CHECK=false
RENDER_TEST_MESH=false
FRAME_RATIO=1
MAX_SIZE=128
DO_TRIM=true
INPUT_DIR="shots/"
OUTPUT="convertsprites.png"
SPEED="slow"
SPRITE_VARIANT="basic"

RENDER_ONE_FRAME=false
PREVIEW_ANIM=false
COMPARE_WITH_SPRITE=false
ONE_FRAME=false

while [ $# -gt 0 ]; do
    case "$1" in
        -r | --render ) RENDER=true; shift ;;
        -f | --folder ) RENDER_DIR="$2"; shift; shift ;;
        -b | --blender-file ) BLENDER_FILE="$2"; shift; shift ;;
        -s | --sprite-sheet ) SPRITE_SHEET="$2"; shift; shift ;;

        --bake ) BAKE=true; shift ;;

        -r | --frame-ratio ) FRAME_RATIO="$2"; shift; shift ;;
        -s | --size ) MAX_SIZE="$2"; shift; shift ;;
        -t | --no-trim ) DO_TRIM=false; shift ;;
        -o | --output ) OUTPUT="$2"; shift; shift ;;
        -u | --speed ) SPEED="$2"; shift; shift ;;
        -v | --verbose ) VERBOSE=true; shift ;;
        -q | --quick ) QUICK_RENDER=true; shift ;;
        --variant ) SPRITE_VARIANT="$2"; shift; shift ;;

        --bounds ) RENDER_BOUNDS_CHECK=true; shift ;;
        --test-mesh ) RENDER_TEST_MESH=true; shift ;;

        --one-frame ) RENDER_ONE_FRAME=true; shift ;;
        --preview-anim ) shift ; previewAnim="$1";
            camera="all"
            case "$2" in
                left ) camera="left"; shift ;;
                right ) camera="right"; shift ;;
                up ) camera="up"; shift ;;
                down ) camera="down"; shift ;;
            esac
            PREVIEW_ANIM=( "$previewAnim" "$camera" )
            UPDATE_SPRITESHEETS_RESOURCE=false
            shift ;;
        --compare-with-sprite ) shift ;
            if [ $PREVIEW_ANIM = false ]; then
                echo "--compare-with-sprite requires --preview-anim first"
                exit
            fi
            compareSprite="$1"; shift;
            anim="$1"; shift;
            camera="all"
            case "$1" in
                left ) camera="left"; shift ;;
                right ) camera="right"; shift ;;
                up ) camera="up"; shift ;;
                down ) camera="down"; shift ;;
            esac
            COMPARE_WITH_SPRITE=( "$compareSprite" "$anim" "$camera" )
            ;;
        --one-frame ) ONE_FRAME=true; shift ;;

        -- ) shift; break ;;
        * ) echo "Unknown option $1" ; exit ;;
    esac
done

if [ $BAKE = false ] && [ "$UPDATE_SPRITESHEETS_RESOURCE" = true ]; then
    UPDATE_SPRITESHEETS_RESOURCE=false
fi

BLENDER_SCRIPT="$ROOT_FOLDER/tools/blender.batchrender.py"
MESH_FOLDER="$( dirname "$BLENDER_FILE" )"
OUTPUT_FOLDER="$MESH_FOLDER/output"
if [ ! -d "$OUTPUT_FOLDER" ]; then
    mkdir "$OUTPUT_FOLDER"
fi

VARIANT_FOLDER="$OUTPUT_FOLDER/$SPRITE_VARIANT"
if [ ! -d "$VARIANT_FOLDER" ]; then
    mkdir "$VARIANT_FOLDER"
fi

if [ "$RENDER_DIR" == "" ]; then
    RENDER_DIR="$VARIANT_FOLDER/shots"
fi

SPRITE_JSON=$( cat "$SPRITE_SHEET" | jq '.' )


EXPORT_RESULTS_FILE="$VARIANT_FOLDER/sprite.export.json"

SPRITE_VARIANT_JSON=$( echo "$SPRITE_JSON" | jq "try .variants[\"$SPRITE_VARIANT\"] catch \"\"" )

if [ "$SPRITE_VARIANT_JSON" == "null" ]; then
    echo "Invalid sprite variant: $SPRITE_VARIANT"
    exit
fi

# Validate the variant
spriteVariantOutput=$( echo "$SPRITE_VARIANT_JSON" | jq '.output' )
spriteVariantAvatar=$( echo "$SPRITE_VARIANT_JSON" | jq '.avatarTitle' )
if [ "$spriteVariantOutput" == "null" ]; then
    echo "Sprite variant doesn't have a valid output!"
    exit
fi
if [ "$spriteVariantAvatar" == "null" ]; then
    echo "Sprite variant doesn't have a valid avatarTitle!"
    exit
fi

# Allow sprite variant settings to override sprite default settings
# Override possible overriden animations
SPRITE_JSON=$( cat "$SPRITE_SHEET" | jq ". + .variants[\"$SPRITE_VARIANT\"] | . + {"animations": (.overrideAnimations + .animations  | unique_by(.name))}" )

SPRITE_PREPROCESSING=$( echo $SPRITE_VARIANT_JSON | jq --raw-output 'try .preProcess catch ""' ) 
SPRITE_POSTPROCESSING=$( echo $SPRITE_VARIANT_JSON | jq --raw-output 'try .postProcess catch ""' ) 

# Render Model shots?
if [ $RENDER = true ]; then
    
    echo "Rendering to $RENDER_DIR"

    extraOptions=""
    if [ $QUICK_RENDER = true ]; then
        extraOptions="$extraOptions --quick"
    fi

    if [ $RENDER_BOUNDS_CHECK = true ]; then
        extraOptions="$extraOptions --bounds"
    fi

    if [ $RENDER_TEST_MESH = true ]; then
        extraOptions="$extraOptions --testmesh"
    fi

    if [ $RENDER_ONE_FRAME = true ]; then
        extraOptions="$extraOptions --oneFrame"
    fi

    if [ $PREVIEW_ANIM != false ]; then
        extraOptions="$extraOptions --previewAnim ${PREVIEW_ANIM[0]} ${PREVIEW_ANIM[1]}"
    fi

    if [[ $( realpath $RENDER_DIR ) = *"$ROOT_FOLDER"* ]]; then
        echo "Safely removing render dir"
        if [ -d "$RENDER_DIR" ]; then
            rm -r $RENDER_DIR
        fi
    fi

    if [ "$SPRITE_PREPROCESSING" != "" ]; then
        echo "Preprocessing sprite before rendering:"
        echo "$SPRITE_PREPROCESSING"
        $( cd "$MESH_FOLDER" ; $SPRITE_PREPROCESSING )
    fi

    #blender Basilisk.josh.blend --verbose 0 --background --python ../../tools/blender.batchrender.py --json sprite.json
    blender "$BLENDER_FILE" --verbose 0 --background --python "$BLENDER_SCRIPT" --json "$SPRITE_SHEET" $extraOptions --output "$RENDER_DIR" --resultsOutput "$EXPORT_RESULTS_FILE"
fi

# Bake the Renders?
if [ $BAKE = true ]; then

    echo "Baking Spritesheet"

    BAKE_SCRIPT="$ROOT_FOLDER/tools/bakespritesheet"
    
    #../../tools/bakespritesheet --frame-ratio 2 --size 256 --no-trim --folder shots.3 --output testjosh.png --speed superslow
    echo "Render Dir: $RENDER_DIR"

    renderRegionSize=$( echo "$SPRITE_JSON" | jq --raw-output 'if has("renderRegionSize") then .renderRegionSize else 256 end' )
    spriteWidth=$( echo $SPRITE_JSON | jq --raw-output '.spriteSize.width' )    # Game width
    spriteHeight=$( echo $SPRITE_JSON | jq --raw-output '.spriteSize.height' )  # Game height
    output="$RENDER_DIR/../output.png"

    extraOptions=""
    if [ $DO_TRIM = false ]; then
        extraOptions="$extraOptions --no-trim"
    fi

    if [ $PREVIEW_ANIM != false ]; then
        extraOptions="$extraOptions --preview-anim"

        if [ $COMPARE_WITH_SPRITE != false ]; then
            echo "Comparing with sprite: ${COMPARE_WITH_SPRITE[0]} ${COMPARE_WITH_SPRITE[1]} ${COMPARE_WITH_SPRITE[2]}"
            extraOptions="$extraOptions --compare-with-sprite ${COMPARE_WITH_SPRITE[@]}"
        fi
    fi

    "$BAKE_SCRIPT" --frame-ratio 2 --size "$renderRegionSize" --folder "$RENDER_DIR" --output "$output" --speed superslow --post-processing "$SPRITE_POSTPROCESSING" --sprite-size $spriteWidth $spriteHeight $extraOptions --export-results-file "$EXPORT_RESULTS_FILE"

    rawOut=$( echo "$SPRITE_JSON" | jq --raw-output '.output' )
    #imgOutput="$ROOT_FOLDER/sprites/${rawOut%.*}.$SPRITE_VARIANT${rawOut##*.}"
    imgOutput="$ROOT_FOLDER/sprites/$rawOut"
    convert "$output" "$imgOutput"
fi

if [ "$UPDATE_SPRITESHEETS_RESOURCE" = true ]; then

    SHEETS_JSON_FILE="$ROOT_FOLDER/resources/data/sheets.json"
    SHEET_JSON=$( cat $SHEETS_JSON_FILE | jq '.' )

    SPRITE_NAME="$( echo $SPRITE_JSON | jq --raw-output '.spriteName' ).$SPRITE_VARIANT"
    SPRITE_IMAGE="/sprites/"$( echo $SPRITE_JSON | jq --raw-output '.output' )
    SPRITE_WIDTH=$( echo $SPRITE_JSON | jq --raw-output '.spriteSize.width' )    # Game width
    SPRITE_HEIGHT=$( echo $SPRITE_JSON | jq --raw-output '.spriteSize.height' )  # Game height

    SHEET_SPRITE_JSON="{}"



    EXPORTED_JSON=$( cat $EXPORT_RESULTS_FILE | jq --raw-output '.' )
    spriteWidth=$( echo $EXPORTED_JSON | jq '.sprite.width' )         # Rendered shots width
    spriteHeight=$( echo $EXPORTED_JSON | jq '.sprite.height' )       # Rendered shots height
    spriteAnimsLength=$( echo $EXPORTED_JSON | jq '.anims | length' )

    SHEET_SPRITE_JSON=$( echo $SHEET_SPRITE_JSON | jq ". + { id: \"$SPRITE_NAME\" }" )
    SHEET_SPRITE_JSON=$( echo $SHEET_SPRITE_JSON | jq ". + { image: \"$SPRITE_IMAGE\" }" )
    SHEET_SPRITE_JSON=$( echo $SHEET_SPRITE_JSON | jq ". + { sheet_offset: { x: 0, y: 0 } }" )
    SHEET_SPRITE_JSON=$( echo $SHEET_SPRITE_JSON | jq ". + { sprite_offset: { x: 0, y: 0 } }" )
    SHEET_SPRITE_JSON=$( echo $SHEET_SPRITE_JSON | jq ". + { sprite_size: { w: $SPRITE_WIDTH, h: $SPRITE_HEIGHT } }" )
    SHEET_SPRITE_JSON=$( echo $SHEET_SPRITE_JSON | jq ". + { tilesize: 64 }" )
    SHEET_SPRITE_JSON=$( echo $SHEET_SPRITE_JSON | jq ". + { columns: 0 }" )
    SHEET_SPRITE_JSON=$( echo $SHEET_SPRITE_JSON | jq ". + { rows: 0 }" )

    SHEET_SPRITE_ANIMATIONS="{}"

    for (( i=0; i<$spriteAnimsLength; i++ )); do
        spriteAnim=$( echo $EXPORTED_JSON | jq ".anims[$i]" )

        spriteAnimName_anim=$( echo $spriteAnim | jq --raw-output '.anim' )
        spriteAnimName_camera=$( echo $spriteAnim | jq --raw-output '.camera' )
        spriteAnimName="$spriteAnimName_anim"_"$spriteAnimName_camera"

        spriteAnimX=$( echo $spriteAnim | jq '.x' )
        spriteAnimY=$( echo $spriteAnim | jq '.y' )
        spriteAnimL=$( echo $spriteAnim | jq '.count' )

        sheetAnim="{}"
        sheetAnim=$( echo $sheetAnim | jq ". + { x: $spriteAnimX }" )
        sheetAnim=$( echo $sheetAnim | jq ". + { y: $spriteAnimY }" )
        sheetAnim=$( echo $sheetAnim | jq ". + { l: $spriteAnimL }" )
        sheetAnim=$( echo $sheetAnim | jq ". + { w: $spriteWidth }" )
        sheetAnim=$( echo $sheetAnim | jq ". + { h: $spriteHeight }" )

        SHEET_SPRITE_ANIMATIONS=$( echo $SHEET_SPRITE_ANIMATIONS | jq ". + { $spriteAnimName: $sheetAnim }" )
    done

    avatarTitle=$( echo $SPRITE_VARIANT_JSON | jq --raw-output '.avatarTitle' )
    avatarAnim=$( echo $SPRITE_JSON | jq --raw-output 'if has("avatarAnim") then .avatarAnim else "walk_down" end' )
    avatarAnimData=$( echo $SHEET_SPRITE_ANIMATIONS | jq ".[\"$avatarAnim\"]" )

    SHEET_SPRITE_AVATAR="{}"
    SHEET_SPRITE_AVATAR=$( echo $SHEET_SPRITE_AVATAR | jq ". + { x: $( echo $avatarAnimData | jq '.x' )  }" )
    SHEET_SPRITE_AVATAR=$( echo $SHEET_SPRITE_AVATAR | jq ". + { y: $( echo $avatarAnimData | jq '.y' )  }" )
    SHEET_SPRITE_AVATAR=$( echo $SHEET_SPRITE_AVATAR | jq ". + { w: $( echo $avatarAnimData | jq '.w' )  }" )
    SHEET_SPRITE_AVATAR=$( echo $SHEET_SPRITE_AVATAR | jq ". + { h: $( echo $avatarAnimData | jq '.h' )  }" )
    SHEET_SPRITE_AVATAR=$( echo $SHEET_SPRITE_AVATAR | jq ". + { title: \"$avatarTitle\" }" )

    SHEET_SPRITE_DATA=$( echo "{}" | jq ". += { animations: $SHEET_SPRITE_ANIMATIONS, avatar: $SHEET_SPRITE_AVATAR }" )
    SHEET_SPRITE_JSON=$( echo $SHEET_SPRITE_JSON | jq ". + { data: $SHEET_SPRITE_DATA }" )


    spriteAlreadyAdded=$( echo $SHEET_JSON | jq ".spritesheets.list[] | select(.id == \"$SPRITE_NAME\") | ." )

    if [ -z "$spriteAlreadyAdded" ]; then
        # Add sprite
        SHEET_JSON=$( echo $SHEET_JSON | jq ".spritesheets.list += [ $SHEET_SPRITE_JSON ]" )
        echo "Adding Sprite"
    else
        # Update sprite
        SHEET_JSON=$( echo $SHEET_JSON | jq "(.spritesheets.list[] | select(.id == \"$SPRITE_NAME\") | .) |= . + $SHEET_SPRITE_JSON" )
        echo "Updating Sprite"
    fi
    echo $SHEET_SPRITE_JSON | jq '.'
    echo $SHEET_JSON | jq '.' > "$SHEETS_JSON_FILE" 
fi

